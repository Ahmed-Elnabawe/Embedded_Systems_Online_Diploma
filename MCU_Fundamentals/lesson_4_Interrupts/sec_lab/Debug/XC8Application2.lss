
XC8Application2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d6  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000305  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000313  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a2  00000000  00000000  0000034b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  00000bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  00001173  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  0000142c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000014ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000228  00000000  00000000  00001682  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000018aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000254  00000254  000002c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000018d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    000000ee  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 0000004c  0000015a  0000015a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 0000004c  000001a6  000001a6  0000021a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_3 0000004c  000001f2  000001f2  00000266  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  0000025c  0000025c  000002d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  0000025e  0000025e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  00000260  00000260  000002d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000023e  0000023e  000002b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  00000258  00000258  000002cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_1>
   8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_2>
   c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_3>
  10:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  14:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  18:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  1c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  20:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  24:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  28:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  2c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  30:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  34:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  38:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  3c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  40:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  44:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  48:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  4c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>
  50:	0c 94 2a 01 	jmp	0x254	; 0x254 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000254 <__bad_interrupt>:
 254:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#define GIFR *(volatile uint32_t*)(IO_BASE+0x3A)
#define SREG *(volatile uint32_t*)(IO_BASE+0x3f)

int main(void)
{
	sei();
  6c:	78 94       	sei
	// set bins for port D as output
	//PORTD_DDR|=(1<<2); // INT 0
	//PORTD_DDR|=(1<<3); // INT 1
	PORTD_DDR|=(1<<5); // led 1
  6e:	81 b3       	in	r24, 0x11	; 17
  70:	92 b3       	in	r25, 0x12	; 18
  72:	a3 b3       	in	r26, 0x13	; 19
  74:	b4 b3       	in	r27, 0x14	; 20
  76:	80 62       	ori	r24, 0x20	; 32
  78:	81 bb       	out	0x11, r24	; 17
  7a:	92 bb       	out	0x12, r25	; 18
  7c:	a3 bb       	out	0x13, r26	; 19
  7e:	b4 bb       	out	0x14, r27	; 20
	PORTD_DDR|=(1<<6); // led 2
  80:	81 b3       	in	r24, 0x11	; 17
  82:	92 b3       	in	r25, 0x12	; 18
  84:	a3 b3       	in	r26, 0x13	; 19
  86:	b4 b3       	in	r27, 0x14	; 20
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	81 bb       	out	0x11, r24	; 17
  8c:	92 bb       	out	0x12, r25	; 18
  8e:	a3 bb       	out	0x13, r26	; 19
  90:	b4 bb       	out	0x14, r27	; 20
	PORTD_DDR|=(1<<7); // led 3
  92:	81 b3       	in	r24, 0x11	; 17
  94:	92 b3       	in	r25, 0x12	; 18
  96:	a3 b3       	in	r26, 0x13	; 19
  98:	b4 b3       	in	r27, 0x14	; 20
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	81 bb       	out	0x11, r24	; 17
  9e:	92 bb       	out	0x12, r25	; 18
  a0:	a3 bb       	out	0x13, r26	; 19
  a2:	b4 bb       	out	0x14, r27	; 20
	// set bin for port b as output 
	//PORTB_DR|=(1<<2); // INT 2
	// set INT 0 as faling and rising detection 
	MCUCR|=(1<<0);
  a4:	85 b7       	in	r24, 0x35	; 53
  a6:	96 b7       	in	r25, 0x36	; 54
  a8:	a7 b7       	in	r26, 0x37	; 55
  aa:	b8 b7       	in	r27, 0x38	; 56
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	85 bf       	out	0x35, r24	; 53
  b0:	96 bf       	out	0x36, r25	; 54
  b2:	a7 bf       	out	0x37, r26	; 55
  b4:	b8 bf       	out	0x38, r27	; 56
	// set INT 1 as rising detection
	MCUCR|=(1<<2);
  b6:	85 b7       	in	r24, 0x35	; 53
  b8:	96 b7       	in	r25, 0x36	; 54
  ba:	a7 b7       	in	r26, 0x37	; 55
  bc:	b8 b7       	in	r27, 0x38	; 56
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	85 bf       	out	0x35, r24	; 53
  c2:	96 bf       	out	0x36, r25	; 54
  c4:	a7 bf       	out	0x37, r26	; 55
  c6:	b8 bf       	out	0x38, r27	; 56
	MCUCR|=(1<<3);
  c8:	85 b7       	in	r24, 0x35	; 53
  ca:	96 b7       	in	r25, 0x36	; 54
  cc:	a7 b7       	in	r26, 0x37	; 55
  ce:	b8 b7       	in	r27, 0x38	; 56
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	85 bf       	out	0x35, r24	; 53
  d4:	96 bf       	out	0x36, r25	; 54
  d6:	a7 bf       	out	0x37, r26	; 55
  d8:	b8 bf       	out	0x38, r27	; 56
	// set INT 2 as faling detection
	MCUCSR&=~(1<<6);
  da:	84 b7       	in	r24, 0x34	; 52
  dc:	95 b7       	in	r25, 0x35	; 53
  de:	a6 b7       	in	r26, 0x36	; 54
  e0:	b7 b7       	in	r27, 0x37	; 55
  e2:	8f 7b       	andi	r24, 0xBF	; 191
  e4:	84 bf       	out	0x34, r24	; 52
  e6:	95 bf       	out	0x35, r25	; 53
  e8:	a6 bf       	out	0x36, r26	; 54
  ea:	b7 bf       	out	0x37, r27	; 55
	// masking the three INTs
	GICR|=(1<<5);
  ec:	8b b7       	in	r24, 0x3b	; 59
  ee:	9c b7       	in	r25, 0x3c	; 60
  f0:	ad b7       	in	r26, 0x3d	; 61
  f2:	be b7       	in	r27, 0x3e	; 62
  f4:	80 62       	ori	r24, 0x20	; 32
  f6:	8b bf       	out	0x3b, r24	; 59
  f8:	9c bf       	out	0x3c, r25	; 60
  fa:	ad bf       	out	0x3d, r26	; 61
  fc:	be bf       	out	0x3e, r27	; 62
	GICR|=(1<<6);
  fe:	8b b7       	in	r24, 0x3b	; 59
 100:	9c b7       	in	r25, 0x3c	; 60
 102:	ad b7       	in	r26, 0x3d	; 61
 104:	be b7       	in	r27, 0x3e	; 62
 106:	80 64       	ori	r24, 0x40	; 64
 108:	8b bf       	out	0x3b, r24	; 59
 10a:	9c bf       	out	0x3c, r25	; 60
 10c:	ad bf       	out	0x3d, r26	; 61
 10e:	be bf       	out	0x3e, r27	; 62
	GICR|=(1<<7);
 110:	8b b7       	in	r24, 0x3b	; 59
 112:	9c b7       	in	r25, 0x3c	; 60
 114:	ad b7       	in	r26, 0x3d	; 61
 116:	be b7       	in	r27, 0x3e	; 62
 118:	80 68       	ori	r24, 0x80	; 128
 11a:	8b bf       	out	0x3b, r24	; 59
 11c:	9c bf       	out	0x3c, r25	; 60
 11e:	ad bf       	out	0x3d, r26	; 61
 120:	be bf       	out	0x3e, r27	; 62

    while(1)
    {
       PORTD_DR &= ~(1<<5);
 122:	82 b3       	in	r24, 0x12	; 18
 124:	93 b3       	in	r25, 0x13	; 19
 126:	a4 b3       	in	r26, 0x14	; 20
 128:	b5 b3       	in	r27, 0x15	; 21
 12a:	8f 7d       	andi	r24, 0xDF	; 223
 12c:	82 bb       	out	0x12, r24	; 18
 12e:	93 bb       	out	0x13, r25	; 19
 130:	a4 bb       	out	0x14, r26	; 20
 132:	b5 bb       	out	0x15, r27	; 21
	   PORTD_DR &= ~(1<<6);
 134:	82 b3       	in	r24, 0x12	; 18
 136:	93 b3       	in	r25, 0x13	; 19
 138:	a4 b3       	in	r26, 0x14	; 20
 13a:	b5 b3       	in	r27, 0x15	; 21
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	82 bb       	out	0x12, r24	; 18
 140:	93 bb       	out	0x13, r25	; 19
 142:	a4 bb       	out	0x14, r26	; 20
 144:	b5 bb       	out	0x15, r27	; 21
	   PORTD_DR &= ~(1<<7);
 146:	82 b3       	in	r24, 0x12	; 18
 148:	93 b3       	in	r25, 0x13	; 19
 14a:	a4 b3       	in	r26, 0x14	; 20
 14c:	b5 b3       	in	r27, 0x15	; 21
 14e:	8f 77       	andi	r24, 0x7F	; 127
 150:	82 bb       	out	0x12, r24	; 18
 152:	93 bb       	out	0x13, r25	; 19
 154:	a4 bb       	out	0x14, r26	; 20
 156:	b5 bb       	out	0x15, r27	; 21
 158:	e4 cf       	rjmp	.-56     	; 0x122 <main+0xb6>

Disassembly of section .text.__vector_1:

0000015a <__vector_1>:
}



ISR(INT0_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
	 PORTD_DR |= (1<<5);
 16e:	82 b3       	in	r24, 0x12	; 18
 170:	93 b3       	in	r25, 0x13	; 19
 172:	a4 b3       	in	r26, 0x14	; 20
 174:	b5 b3       	in	r27, 0x15	; 21
 176:	80 62       	ori	r24, 0x20	; 32
 178:	82 bb       	out	0x12, r24	; 18
 17a:	93 bb       	out	0x13, r25	; 19
 17c:	a4 bb       	out	0x14, r26	; 20
 17e:	b5 bb       	out	0x15, r27	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	80 e7       	ldi	r24, 0x70	; 112
 184:	92 e0       	ldi	r25, 0x02	; 2
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <__vector_1+0x2c>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <__vector_1+0x36>
 190:	00 00       	nop
	 _delay_ms(100);
}
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

Disassembly of section .text.__vector_2:

000001a6 <__vector_2>:
ISR(INT1_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	2f 93       	push	r18
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
	PORTD_DR |= (1<<6);
 1ba:	82 b3       	in	r24, 0x12	; 18
 1bc:	93 b3       	in	r25, 0x13	; 19
 1be:	a4 b3       	in	r26, 0x14	; 20
 1c0:	b5 b3       	in	r27, 0x15	; 21
 1c2:	80 64       	ori	r24, 0x40	; 64
 1c4:	82 bb       	out	0x12, r24	; 18
 1c6:	93 bb       	out	0x13, r25	; 19
 1c8:	a4 bb       	out	0x14, r26	; 20
 1ca:	b5 bb       	out	0x15, r27	; 21
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	80 e7       	ldi	r24, 0x70	; 112
 1d0:	92 e0       	ldi	r25, 0x02	; 2
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <__vector_2+0x2c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <__vector_2+0x36>
 1dc:	00 00       	nop
	_delay_ms(100);
}
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

Disassembly of section .text.__vector_3:

000001f2 <__vector_3>:
ISR(INT2_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
	PORTD_DR |= (1<<7);
 206:	82 b3       	in	r24, 0x12	; 18
 208:	93 b3       	in	r25, 0x13	; 19
 20a:	a4 b3       	in	r26, 0x14	; 20
 20c:	b5 b3       	in	r27, 0x15	; 21
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	82 bb       	out	0x12, r24	; 18
 212:	93 bb       	out	0x13, r25	; 19
 214:	a4 bb       	out	0x14, r26	; 20
 216:	b5 bb       	out	0x15, r27	; 21
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	80 e7       	ldi	r24, 0x70	; 112
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <__vector_3+0x2c>
 226:	00 c0       	rjmp	.+0      	; 0x228 <__vector_3+0x36>
 228:	00 00       	nop
	_delay_ms(100);
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000025c <_fini>:
 25c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000025e <__funcs_on_exit>:
 25e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000260 <__simulator_exit>:
 260:	08 95       	ret

Disassembly of section .text.exit:

0000023e <exit>:
 23e:	ec 01       	movw	r28, r24
 240:	0e 94 2f 01 	call	0x25e	; 0x25e <__funcs_on_exit>
 244:	0e 94 2e 01 	call	0x25c	; 0x25c <_fini>
 248:	ce 01       	movw	r24, r28
 24a:	0e 94 30 01 	call	0x260	; 0x260 <__simulator_exit>
 24e:	ce 01       	movw	r24, r28
 250:	0e 94 2c 01 	call	0x258	; 0x258 <_Exit>

Disassembly of section .text._Exit:

00000258 <_Exit>:
 258:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
