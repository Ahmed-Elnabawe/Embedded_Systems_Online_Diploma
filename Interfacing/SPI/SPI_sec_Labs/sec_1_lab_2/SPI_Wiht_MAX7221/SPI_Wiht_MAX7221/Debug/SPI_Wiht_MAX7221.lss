
SPI_Wiht_MAX7221.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b9  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cc  00000000  00000000  00000885  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bb  00000000  00000000  00000e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <execute>:
#define F_CPU 1000000UL
#include <avr/io.h>
#include <util/delay.h>
void execute(unsigned char cmd , unsigned char data)
{
	PORTB &= ~(1<<4); // set ss to be low to allow transmit
  6c:	98 b3       	in	r25, 0x18	; 24
  6e:	9f 7e       	andi	r25, 0xEF	; 239
  70:	98 bb       	out	0x18, r25	; 24
	SPDR = cmd ; // send first byte (cmd)
  72:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1 << SPIF))); // wait until the transmit  is done  
  74:	77 9b       	sbis	0x0e, 7	; 14
  76:	fe cf       	rjmp	.-4      	; 0x74 <execute+0x8>
	SPDR = data ; // send first byte (data)
  78:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1 << SPIF))); // wait until the transmit  is done
  7a:	77 9b       	sbis	0x0e, 7	; 14
  7c:	fe cf       	rjmp	.-4      	; 0x7a <execute+0xe>
	PORTB |= (1<<4); // set ss to be high to end transmit
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	80 61       	ori	r24, 0x10	; 16
  82:	88 bb       	out	0x18, r24	; 24
  84:	08 95       	ret

00000086 <main>:
int main(void)
{
	unsigned char counter =0;
	unsigned char indx_display ;
	// set mosi & ss & clck as output
	DDRB |= (1<<4) | (1<<5) | (1<<7);
  86:	87 b3       	in	r24, 0x17	; 23
  88:	80 6b       	ori	r24, 0xB0	; 176
  8a:	87 bb       	out	0x17, r24	; 23
	// enabel spi & and set as a master & set clock speed to 16
	SPCR |= (1 << SPE ) | ( 1<< MSTR) | (1 << SPR0);
  8c:	8d b1       	in	r24, 0x0d	; 13
  8e:	81 65       	ori	r24, 0x51	; 81
  90:	8d b9       	out	0x0d, r24	; 13
    /* Replace with your application code */
	execute(0x09,0xff); // decode 0-7 digits
  92:	6f ef       	ldi	r22, 0xFF	; 255
  94:	89 e0       	ldi	r24, 0x09	; 9
  96:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
	execute(0x0B,0x07); // scan limit 
  9a:	67 e0       	ldi	r22, 0x07	; 7
  9c:	8b e0       	ldi	r24, 0x0B	; 11
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
	execute(0x0A,0x0f); // set the Intensity
  a2:	6f e0       	ldi	r22, 0x0F	; 15
  a4:	8a e0       	ldi	r24, 0x0A	; 10
  a6:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
	execute(0x0C,0x01); // decode 0-7 digits
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	8c e0       	ldi	r24, 0x0C	; 12
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
	PORTB |= (1<<4); // set ss to be high to end transmit

}
int main(void)
{
	unsigned char counter =0;
  b2:	60 e0       	ldi	r22, 0x00	; 0
	execute(0x0A,0x0f); // set the Intensity
	execute(0x0C,0x01); // decode 0-7 digits

    while (1) 
    {
		for (indx_display=1 ; indx_display < 9 ; indx_display++)
  b4:	c1 e0       	ldi	r28, 0x01	; 1
  b6:	10 c0       	rjmp	.+32     	; 0xd8 <main+0x52>
		{
			
			execute(indx_display,counter++);
  b8:	d1 e0       	ldi	r29, 0x01	; 1
  ba:	d6 0f       	add	r29, r22
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 36 00 	call	0x6c	; 0x6c <execute>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f e3       	ldi	r18, 0x3F	; 63
  c4:	8d e0       	ldi	r24, 0x0D	; 13
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x42>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x4c>
  d2:	00 00       	nop
	execute(0x0A,0x0f); // set the Intensity
	execute(0x0C,0x01); // decode 0-7 digits

    while (1) 
    {
		for (indx_display=1 ; indx_display < 9 ; indx_display++)
  d4:	cf 5f       	subi	r28, 0xFF	; 255
		{
			
			execute(indx_display,counter++);
  d6:	6d 2f       	mov	r22, r29
	execute(0x0A,0x0f); // set the Intensity
	execute(0x0C,0x01); // decode 0-7 digits

    while (1) 
    {
		for (indx_display=1 ; indx_display < 9 ; indx_display++)
  d8:	c9 30       	cpi	r28, 0x09	; 9
  da:	70 f3       	brcs	.-36     	; 0xb8 <main+0x32>
  dc:	eb cf       	rjmp	.-42     	; 0xb4 <main+0x2e>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
